/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

/**
 *
 * @author traig
 */
import model.Student;
import model.Subject;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import static javax.swing.JTable.AUTO_RESIZE_OFF;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.EditModel;
import model.IEditModel;
import presenter.DashBoardPresenter;
import presenter.EditPresenter;
import presenter.IEditPresenter;
import presenter.IDashBoardPresenter;

/**add filter to row :https://stackoverflow.com/questions/22066387/how-to-search-an-element-in-a-jtable-java*/

public class DashBoardView extends javax.swing.JFrame implements IDashBoardView{
    private IDashBoardPresenter dashboardPresenter;
     private TableRowSorter<TableModel> rowSorter;
    private Map<Integer, List<List<String>>> results;
    private Map<Integer, Student> listStudents;
    /**
     * Creates new form DashBoardView
     */
    public DashBoardView() {
               initComponents();
               listStudents = new HashMap<>();
               
    }
    public IDashBoardPresenter getPresenter(){
        return dashboardPresenter;
    }
    
    public void setPresenter(IDashBoardPresenter dashBoardPresenter){
        this.dashboardPresenter = dashBoardPresenter;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        users = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        users.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(users);

        deleteBtn.setText("XÓA");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        editBtn.setText("SỬA");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        addBtn.setText("THÊM");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("FILTER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                        .addComponent(deleteBtn)
                        .addGap(260, 260, 260)
                        .addComponent(editBtn)
                        .addGap(253, 253, 253)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addGap(101, 101, 101)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(63, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(editBtn)
                    .addComponent(addBtn)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
         int row = users.getSelectedRow();
         if(row == -1)
             OnFail();
         //remove row
        this.dashboardPresenter.removeStudent( Integer.valueOf((String)users.getModel().getValueAt(row, 0)));
         this.dashboardPresenter.removeResults(Integer.valueOf((String)users.getModel().getValueAt(row, 0)));
            System.out.println("DONE!");
         ((DefaultTableModel)users.getModel()).removeRow(row);
         
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
         int row = users.getSelectedRow();
          if(row == -1)
             OnFail();
          else{
              row = users.getSelectedRow();
                Object[] res = new Object[users.getModel().getColumnCount()];
                System.out.println(res.length);
        for(int i = 0;i < res.length; i++)
        res[i] = users.getModel().getValueAt(row, i);//getting data from table and send it to presenter
        
         dashboardPresenter.editStudent(listStudents.get(Integer.valueOf((String)res[0])), results.get(Integer.valueOf((String)res[0])), row);
        }
      
    }//GEN-LAST:event_editBtnActionPerformed

    public  void addRow(Student student, List<List<String>> results){
         ((DefaultTableModel)users.getModel()).addRow(new Object[]{Integer.toString(student.getStudentid()), student.getFullname(), student.getGender(), student.getBirth(),
                 (student.getAddress()),(student.getClassName()),  results.get(1).get(0), results.get(1).get(1), results.get(1).get(2)
         ,results.get(1).get(3),results.get(1).get(4), results.get(1).get(5)});
         System.out.println("ADDED A ROW!");
         
    }
    
    
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
      dashboardPresenter.addStudent();
    }//GEN-LAST:event_addBtnActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchText;
    static javax.swing.JTable users;
    // End of variables declaration//GEN-END:variables

    @Override
    public void open() {
        setVisible(true);
        dashboardPresenter.loadStudents();
    }

    @Override
    public void close() {
        dispose();
    }

    @Override
    public void showUsers(List<List<String>> listUses, Map<Integer, List<List<String>>> results) {
         //this method is called from presenter when presenter load users from
         //database
         String[] columnNames = {"ID",
                        "FULL NAME",
                        "GENDER",
                        "BIRTH","ADDRESS", "CLASS","MATH",
                        "PROGRAMMING",
                        "DBMS",
                        "OTOMATA",
                        "ENGLISH","NETWORKING COMPUTER", "GPA"};
         this.results = results;
         Map<Integer, List<Subject>> listSubjects = new HashMap<>();
         List<Map.Entry<Integer, List<List<String>>>> listResult = new ArrayList<>(results.entrySet());
         String[][] data  = new String[listUses.size()][ listUses.get(0).size() + listResult.get(0).getValue().get(1).size()+1];
         for (int i = 0; i < listUses.size(); i++) {
            String[] temp = new String[listUses.get(i).size()];
            
            temp = listUses.get(i).toArray(temp);
            Student student = new Student(Integer.valueOf(temp[0]), temp[1], temp[2], temp[3], temp[4], temp[5], null);
           
            for(int j =0; j<temp.length; j++ ){
                 data[i][j] = temp[j];
            }
            listStudents.put(student.getStudentid(), student);
             System.out.println(Arrays.toString(temp));
            
        }
         for (int i = 0; i <  listUses.size(); i++) {
            String[] temp = new String[listResult.get(i).getValue().get(1).size()];
            List<Subject> list = new ArrayList<>();  
             System.out.println("size of lsit :" + listUses.get(0).size());
             float gpa = 0;
            for(int j = 0; j < temp.length; j++){
                temp = listResult.get(i).getValue().get(1).toArray(temp);//getting data from listresult.
                 data[i][j + listUses.get(0).size()] = temp[j];//assigning to each columns in each rows
                 System.out.println(Arrays.toString(data[i]));
                 list.add(new Subject( listResult.get(0).getValue().get(0).get(j), Float.valueOf(temp[j])));
                 gpa += Float.valueOf(temp[j]);
            }
            data[i][data[i].length-1 ] = Float.toString((gpa/ temp.length));
            listStudents.get(Integer.valueOf(listUses.get(i).get(0))).setListSubjects(list);
            listSubjects.put(listResult.get(i).getKey(), list);
        }
         
         DefaultTableModel dtm = new DefaultTableModel(columnNames,0);
         users.setModel(dtm);
           for (int i = 0; i < data.length; i++)
            dtm.addRow(data[i]);
           addFilter();
    }   
    /**Filter method is to filter data*/
    private void addFilter(){
        searchText.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if(searchText.getText().equals("Searching...")) {
                    searchText.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if(searchText.getText().isEmpty()) {
                    searchText.setText("Searching...");
                }
            }
        });
        rowSorter = new TableRowSorter<>(users.getModel());
        users.setAutoCreateRowSorter(true);
               users.setRowSorter(rowSorter);
               searchText.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchText.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchText.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
    }
    
    @Override
    public void OnSuccess() {
           JOptionPane.showMessageDialog(getOwner(),
    " SUCCESSFULLY!");
          
    }
    
    @Override
    public void OnFail() {
       JOptionPane.showMessageDialog(getOwner(),
    "YOU HAVE ENTERED SOMETHINGS WRONG!", "ERROR",JOptionPane.ERROR_MESSAGE);
    }
       /**@param row: row that is selected to edit */
    @Override
    public void updateStudent(Student student, int row) {
         ((DefaultTableModel)users.getModel()).setValueAt((student.getStudentid()), row, 0);
         ((DefaultTableModel)users.getModel()).setValueAt((student.getFullname()), row, 1);
         ((DefaultTableModel)users.getModel()).setValueAt((student.getGender()), row, 2);
         ((DefaultTableModel)users.getModel()).setValueAt((student.getBirth()), row, 3);
         ((DefaultTableModel)users.getModel()).setValueAt((student.getAddress()), row, 4);
         ((DefaultTableModel)users.getModel()).setValueAt((student.getClassName()), row, 5);
    }
    /**@param row: row that is selected to edit */
    @Override
    public void updateResult(List<List<String>> results, int row) {//updateing result after changing data
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(0), row, 6);
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(1), row, 7);
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(2), row, 8);
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(3), row, 9);
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(4), row, 10);
         ((DefaultTableModel)users.getModel()).setValueAt(results.get(1).get(5), row, 11);
          ((DefaultTableModel)users.getModel()).setValueAt(Float.toString((Float.valueOf(results.get(1).get(0)) + Float.valueOf(results.get(1).get(1))+
                  Float.valueOf(results.get(1).get(2))+Float.valueOf(results.get(1).get(3))+Float.valueOf(results.get(1).get(4)) +Float.valueOf(results.get(1).get(5)))/6) , row, 12);
    }
}
